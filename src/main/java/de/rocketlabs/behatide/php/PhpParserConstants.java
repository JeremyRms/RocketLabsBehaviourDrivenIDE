/* Generated By:JavaCC: Do not edit this line. PhpParserConstants.java */
package de.rocketlabs.behatide.php;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface PhpParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int PHP_BEGIN = 1;
    /**
     * RegularExpression Id.
     */
    int PHP_EXPR = 2;
    /**
     * RegularExpression Id.
     */
    int HTML_OTHER = 3;
    /**
     * RegularExpression Id.
     */
    int HTML = 4;
    /**
     * RegularExpression Id.
     */
    int SLASH_SLASH_COMMENT = 9;
    /**
     * RegularExpression Id.
     */
    int NUMERAL_COMMENT = 10;
    /**
     * RegularExpression Id.
     */
    int SLASH_STAR_COMMENT = 11;
    /**
     * RegularExpression Id.
     */
    int INTEGER_LITERAL = 12;
    /**
     * RegularExpression Id.
     */
    int DECIMAL_LITERAL = 13;
    /**
     * RegularExpression Id.
     */
    int HEX_LITERAL = 14;
    /**
     * RegularExpression Id.
     */
    int OCTAL_LITERAL = 15;
    /**
     * RegularExpression Id.
     */
    int FLOATING_POINT_LITERAL = 16;
    /**
     * RegularExpression Id.
     */
    int EXPONENT = 17;
    /**
     * RegularExpression Id.
     */
    int DOUBLE_STRING_LITERAL_START = 18;
    /**
     * RegularExpression Id.
     */
    int SINGLE_STRING_LITERAL_START = 19;
    /**
     * RegularExpression Id.
     */
    int HEREDOC_START = 20;
    /**
     * RegularExpression Id.
     */
    int SINGLE_STRING_LITERAL_END = 22;
    /**
     * RegularExpression Id.
     */
    int DOUBLE_STRING_LITERAL_END = 26;
    /**
     * RegularExpression Id.
     */
    int DSL_SIMPLE_VAR_START = 27;
    /**
     * RegularExpression Id.
     */
    int DSL_COMPLEX_VAR_START = 28;
    /**
     * RegularExpression Id.
     */
    int TEXT = 30;
    /**
     * RegularExpression Id.
     */
    int DSL_COMPLEX_VAR_END = 31;
    /**
     * RegularExpression Id.
     */
    int DSL_CV_TEXT = 32;
    /**
     * RegularExpression Id.
     */
    int DSL_SIMPLE_VAR_END = 33;
    /**
     * RegularExpression Id.
     */
    int DSL_SIMPLE_STRING_VAR_END = 34;
    /**
     * RegularExpression Id.
     */
    int DSL_SIMPLE_VAR_WASNT = 35;
    /**
     * RegularExpression Id.
     */
    int HD1 = 40;
    /**
     * RegularExpression Id.
     */
    int HD2 = 45;
    /**
     * RegularExpression Id.
     */
    int REQUIRE_ONCE = 47;
    /**
     * RegularExpression Id.
     */
    int REQUIRE = 48;
    /**
     * RegularExpression Id.
     */
    int INCLUDE_ONCE = 49;
    /**
     * RegularExpression Id.
     */
    int INCLUDE = 50;
    /**
     * RegularExpression Id.
     */
    int NAMESPACE = 51;
    /**
     * RegularExpression Id.
     */
    int USE = 52;
    /**
     * RegularExpression Id.
     */
    int DEFINE = 53;
    /**
     * RegularExpression Id.
     */
    int ECHO = 54;
    /**
     * RegularExpression Id.
     */
    int PRINT = 55;
    /**
     * RegularExpression Id.
     */
    int SWITCH = 56;
    /**
     * RegularExpression Id.
     */
    int CASE = 57;
    /**
     * RegularExpression Id.
     */
    int DFLT = 58;
    /**
     * RegularExpression Id.
     */
    int BREAK = 59;
    /**
     * RegularExpression Id.
     */
    int RETURN = 60;
    /**
     * RegularExpression Id.
     */
    int DO = 61;
    /**
     * RegularExpression Id.
     */
    int WHILE = 62;
    /**
     * RegularExpression Id.
     */
    int FOREACH = 63;
    /**
     * RegularExpression Id.
     */
    int AS = 64;
    /**
     * RegularExpression Id.
     */
    int FOR = 65;
    /**
     * RegularExpression Id.
     */
    int CONTINUE = 66;
    /**
     * RegularExpression Id.
     */
    int IF = 67;
    /**
     * RegularExpression Id.
     */
    int ELSE = 68;
    /**
     * RegularExpression Id.
     */
    int ELSEIF = 69;
    /**
     * RegularExpression Id.
     */
    int AND = 70;
    /**
     * RegularExpression Id.
     */
    int OR = 71;
    /**
     * RegularExpression Id.
     */
    int XOR = 72;
    /**
     * RegularExpression Id.
     */
    int NOT = 73;
    /**
     * RegularExpression Id.
     */
    int FUNCTION = 74;
    /**
     * RegularExpression Id.
     */
    int CLASS = 75;
    /**
     * RegularExpression Id.
     */
    int EXTENDS = 76;
    /**
     * RegularExpression Id.
     */
    int VAR = 77;
    /**
     * RegularExpression Id.
     */
    int PUBLIC = 78;
    /**
     * RegularExpression Id.
     */
    int PRIVATE = 79;
    /**
     * RegularExpression Id.
     */
    int PROTECTED = 80;
    /**
     * RegularExpression Id.
     */
    int ABSTRACT = 81;
    /**
     * RegularExpression Id.
     */
    int FINAL = 82;
    /**
     * RegularExpression Id.
     */
    int STATIC = 83;
    /**
     * RegularExpression Id.
     */
    int INTERFACE = 84;
    /**
     * RegularExpression Id.
     */
    int IMPLEMENTS = 85;
    /**
     * RegularExpression Id.
     */
    int CONST = 86;
    /**
     * RegularExpression Id.
     */
    int CLONE = 87;
    /**
     * RegularExpression Id.
     */
    int INSTANCEOF = 88;
    /**
     * RegularExpression Id.
     */
    int GLOBAL = 89;
    /**
     * RegularExpression Id.
     */
    int ARRAY = 90;
    /**
     * RegularExpression Id.
     */
    int NEW = 91;
    /**
     * RegularExpression Id.
     */
    int PREDEFINED_CONSTANT = 92;
    /**
     * RegularExpression Id.
     */
    int PHP_END = 93;
    /**
     * RegularExpression Id.
     */
    int DOLLAR = 94;
    /**
     * RegularExpression Id.
     */
    int SEMICOLON = 95;
    /**
     * RegularExpression Id.
     */
    int TRY = 96;
    /**
     * RegularExpression Id.
     */
    int CATCH = 97;
    /**
     * RegularExpression Id.
     */
    int THROW = 98;
    /**
     * RegularExpression Id.
     */
    int GT = 99;
    /**
     * RegularExpression Id.
     */
    int VAR_NAME = 100;
    /**
     * RegularExpression Id.
     */
    int LETTER1 = 101;
    /**
     * RegularExpression Id.
     */
    int DIGIT1 = 102;
    /**
     * RegularExpression Id.
     */
    int DOLLAR1 = 103;
    /**
     * RegularExpression Id.
     */
    int VARTYPE = 104;
    /**
     * RegularExpression Id.
     */
    int IDENTIFIER = 105;
    /**
     * RegularExpression Id.
     */
    int LETTER = 106;
    /**
     * RegularExpression Id.
     */
    int DIGIT = 107;
    /**
     * RegularExpression Id.
     */
    int FQCN = 108;

    /**
     * Lexical state.
     */
    int HTML_STATE = 0;
    /**
     * Lexical state.
     */
    int DEFAULT = 1;
    /**
     * Lexical state.
     */
    int SINGLE_STRING_LITERAL = 2;
    /**
     * Lexical state.
     */
    int SSL_SPECIAL = 3;
    /**
     * Lexical state.
     */
    int DOUBLE_STRING_LITERAL = 4;
    /**
     * Lexical state.
     */
    int DSL_COMPLEX_VAR = 5;
    /**
     * Lexical state.
     */
    int DSL_SIMPLE_VAR = 6;
    /**
     * Lexical state.
     */
    int DSL_SPECIAL = 7;
    /**
     * Lexical state.
     */
    int HEREDOC1 = 8;
    /**
     * Lexical state.
     */
    int HEREDOC = 9;
    /**
     * Lexical state.
     */
    int HEREDOC2 = 10;
    /**
     * Lexical state.
     */
    int VAR_NAME_STATE = 11;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "<PHP_BEGIN>",
            "\"<?=\"",
            "<HTML_OTHER>",
            "<HTML>",
            "\" \"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\r\"",
            "<SLASH_SLASH_COMMENT>",
            "<NUMERAL_COMMENT>",
            "<SLASH_STAR_COMMENT>",
            "<INTEGER_LITERAL>",
            "<DECIMAL_LITERAL>",
            "<HEX_LITERAL>",
            "<OCTAL_LITERAL>",
            "<FLOATING_POINT_LITERAL>",
            "<EXPONENT>",
            "\"\\\"\"",
            "\"\\\'\"",
            "\"<<<\"",
            "\"\\\\\"",
            "\"\\\'\"",
            "<token of kind 23>",
            "<token of kind 24>",
            "<token of kind 25>",
            "\"\\\"\"",
            "\"$\"",
            "<DSL_COMPLEX_VAR_START>",
            "\"\\\\\"",
            "<TEXT>",
            "\"}\"",
            "<DSL_CV_TEXT>",
            "<DSL_SIMPLE_VAR_END>",
            "\"\\\"\"",
            "<DSL_SIMPLE_VAR_WASNT>",
            "<token of kind 36>",
            "<token of kind 37>",
            "<token of kind 38>",
            "<token of kind 39>",
            "<HD1>",
            "<token of kind 41>",
            "\"\\n\"",
            "<token of kind 43>",
            "\"\\n\"",
            "<HD2>",
            "<token of kind 46>",
            "\"require_once\"",
            "\"require\"",
            "\"include_once\"",
            "\"include\"",
            "\"namespace\"",
            "\"use\"",
            "\"define\"",
            "\"echo\"",
            "\"print\"",
            "\"switch\"",
            "\"case\"",
            "\"default\"",
            "\"break\"",
            "\"return\"",
            "\"do\"",
            "\"while\"",
            "\"foreach\"",
            "\"as\"",
            "\"for\"",
            "\"continue\"",
            "\"if\"",
            "\"else\"",
            "\"elseif\"",
            "\"and\"",
            "\"or\"",
            "\"xor\"",
            "\"not\"",
            "\"function\"",
            "\"class\"",
            "\"extends\"",
            "\"var\"",
            "\"public\"",
            "\"private\"",
            "\"protected\"",
            "\"abstract\"",
            "\"final\"",
            "\"static\"",
            "\"interface\"",
            "\"implements\"",
            "\"const\"",
            "\"clone\"",
            "\"instanceof\"",
            "\"global\"",
            "\"array\"",
            "\"new\"",
            "<PREDEFINED_CONSTANT>",
            "\"?>\"",
            "\"$\"",
            "\";\"",
            "\"try\"",
            "\"catch\"",
            "\"throw\"",
            "\"<\"",
            "<VAR_NAME>",
            "<LETTER1>",
            "<DIGIT1>",
            "\"$\"",
            "<VARTYPE>",
            "<IDENTIFIER>",
            "<LETTER>",
            "<DIGIT>",
            "<FQCN>",
            "\"\\u001a\"",
            "\",\"",
            "\"{\"",
            "\"}\"",
            "\"=\"",
            "\"&\"",
            "\"(\"",
            "\")\"",
            "\":\"",
            "\"=>\"",
            "\"\\\\\"",
            "\"@\"",
            "\"+=\"",
            "\"-=\"",
            "\"*=\"",
            "\"/=\"",
            "\".=\"",
            "\"%=\"",
            "\"&=\"",
            "\"|=\"",
            "\"^=\"",
            "\"<<=\"",
            "\">>=\"",
            "\"?\"",
            "\"||\"",
            "\"&&\"",
            "\"|\"",
            "\"^\"",
            "\"==\"",
            "\"!=\"",
            "\"===\"",
            "\"!==\"",
            "\">\"",
            "\"<=\"",
            "\">=\"",
            "\"<<\"",
            "\">>\"",
            "\"+\"",
            "\"-\"",
            "\".\"",
            "\"*\"",
            "\"/\"",
            "\"%\"",
            "\"~\"",
            "\"!\"",
            "\"++\"",
            "\"--\"",
            "\"->\"",
            "\"::\"",
            "\"[\"",
            "\"]\"",
    };

}
